'use strict';let originalConfig=[],config=[];const getType=(a)=>Object.prototype.toString.call(a).slice(8,-1).toLowerCase();function compareLibVersion(a,b){if(!a&&!b)return 0;if(!a)return-1;if(!b)return 1;const c=/\d+/g,d=a.match(c),e=b.match(c);if(!d)return-1;if(!e)return 1;const f=d.map((a)=>parseInt(a)),g=e.map((a)=>parseInt(a)),h=d.length>e.length?e.length:d.length;for(let c=0;c<h;c++){if(f[c]<g[c])return-1;if(f[c]>g[c])return 1}return f.length===g.length?0:f.length<g.length?-1:1}function reply(a,b,c){self.postMessage({error:a,result:b,ext:c})}function evaluate(a,b,c){const d=config||[];for(const e of d)try{if(e.used)break;const d=e.config;let f=!0;if(d.scope&&'array'===getType(d.scope)&&0<d.scope.length){f=!1;for(const a of d.scope)switch(a.type){case'lib':{if(!b)continue;const c=b.libVersion;if(a.target)switch(a.operator){case'=':{const b=getType(a.target);if('string'===b){if(c===a.target){f=!0;break}}else if('array'===b)for(const b of a.target)if(b===c){f=!0;break}break}case'<':{const b=getType(a.target);if('string'===b&&0>compareLibVersion(c,a.target)){f=!0;break}break}case'>':{const b=getType(a.target);if('string'===b&&0<compareLibVersion(c,a.target)){f=!0;break}break}case'<=':{const b=getType(a.target);if('string'===b&&!(0<compareLibVersion(c,a.target))){f=!0;break}break}case'>=':{const b=getType(a.target);if('string'===b&&!(0>compareLibVersion(c,a.target))){f=!0;break}break}}break}default:}}if(!f)continue;if('full'===d.matchType&&d.match===a||'reg'===d.matchType&&new RegExp(d.match).test(a)){reply(null,{config:d},c),e.used=!0;break}}catch(a){reply(`appservice.js error while processing rule ${e.logid}: ${a}`),e&&(e.used=!0)}}self.onmessage=(a)=>{if(a.data)switch(a.data.msgType){case'evaluate':{a.data.msgData&&a.data.msgData.message&&evaluate(a.data.msgData.message,a.data.msgData.context,a.data.msgData.ext);break}case'refreshSession':{config=JSON.parse(JSON.stringify(originalConfig||'[]'));break}case'updateConfig':{originalConfig=a.data.msgData,config=JSON.parse(JSON.stringify(originalConfig||'[]'));break}}};