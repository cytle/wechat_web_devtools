{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","isLong","util","configure","module","1","require","asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","floor","JSON","stringify","body","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","fullName","isUnsigned","type","genValuePartial_toObject","converter","fromObject","mtype","fields","fieldsArray","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","hasKs2","_fieldsArray","indexOf","missing","decoder","filter","group","ref","id","keyType","types","long","basic","packed","rfield","required","genTypePartial","encoder","wireType","mapKey","optional","comment","comments","ReflectionObject","TypeError","valuesById","create","reserved","constructor","className","Namespace","fromJSON","json","enm","toJSON","toJSONOptions","keepComments","add","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","rule","extend","isObject","ruleRe","toLowerCase","message","defaultValue","bytes","extensionField","declaringField","_packed","Type","defineProperty","get","getOption","setOption","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","load","root","Root","loadSync","build","verifier","OneOf","MapField","Service","Method","Message","wrappers","Reader","BufferReader","Writer","BufferWriter","rpc","roots","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","prev","setOptions","onAdd","onRemove","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","oneof","addFieldsToParent","self","oneofName","oneOfGetter","set","oneOfSetter","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skip","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","methodName","lcFirst","isReserved","m","q","s","oneofs","extensions","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","setup","wrapper","originalThis","fork","ldelim","typeName","target","bake","o","key","safePropBackslashRe","safePropQuoteRe","ucFirst","str","toUpperCase","camelCaseRe","camelCase","a","decorateRoot","enumerable","decorateEnumIndex","zero","toNumber","zzEncode","zeroHash","from","parseInt","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","newError","CustomError","captureStackTrace","stack","versions","node","Number","isFinite","isset","isSet","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","invalid","expected","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","type_url","substr","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            if (Long && Long.isLong) {\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            }\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(14),\r\n    util = require(33);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %i:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(32),\r\n    util     = require(33);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(21),\r\n    util = require(33);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\r\nfunction Enum(name, values, options, comment, comments) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Enum comment text.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = comments || {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"comment\"  , keepComments ? this.comment : undefined,\r\n        \"comments\" , keepComments ? this.comments : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(14),\r\n    types = require(32),\r\n    util  = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(13);\r\nprotobuf.decoder          = require(12);\r\nprotobuf.verifier         = require(36);\r\nprotobuf.converter        = require(11);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(14);\r\nprotobuf.Type             = require(31);\r\nprotobuf.Field            = require(15);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(30);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Message          = require(19);\r\nprotobuf.wrappers         = require(37);\r\n\r\n// Utility\r\nprotobuf.types            = require(32);\r\nprotobuf.util             = require(33);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(38);\r\nprotobuf.BufferWriter = require(39);\r\nprotobuf.Reader       = require(24);\r\nprotobuf.BufferReader = require(25);\r\n\r\n// Utility\r\nprotobuf.util         = require(35);\r\nprotobuf.rpc          = require(28);\r\nprotobuf.roots        = require(27);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(15);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction MapField(name, id, keyType, type, options, comment) {\r\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n\r\n    /**\r\n     * Comment for this method\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options,\r\n        \"comment\"        , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(14),\r\n    Field    = require(15),\r\n    util     = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array, toJSONOptions) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum: \" + name);\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type: \" + path);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(33);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(15),\r\n    util  = require(33);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction OneOf(name, fieldNames, options, comment) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(15),\r\n    Enum    = require(14),\r\n    OneOf   = require(23),\r\n    util    = require(33);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(35);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(33),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    service.comment = json.comment;\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(23),\r\n    Field     = require(15),\r\n    MapField  = require(18),\r\n    Service   = require(30),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(38),\r\n    util      = require(33),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(36),\r\n    converter = require(11),\r\n    wrappers  = require(37);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    if (json.comment)\r\n        type.comment = json.comment;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined,\r\n        \"comment\"    , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nvar roots = require(27);\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (object) {\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {},\r\n        index  = 0;\r\n    while (index < array.length) {\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(14);\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(26))());\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// float handling accross browsers\r\nutil.float = require(6);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(7);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(10);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(9);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(34);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(33);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else {\r\n            gen\r\n            (\"{\")\r\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n                (\"if(e)\")\r\n                    (\"return%j+e\", field.name + \".\")\r\n            (\"}\");\r\n        }\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(19);\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type) {\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                return this.create({\r\n                    type_url: \"/\" + type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            // Only use fully qualified type name after the last '/'\r\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(38);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(35);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}