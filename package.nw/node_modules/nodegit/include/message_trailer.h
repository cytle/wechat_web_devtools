// This is a generated file, modify: generate/templates/templates/class_header.h

#ifndef GITMESSAGETRAILER_H
#define GITMESSAGETRAILER_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "nodegit_wrapper.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"


using namespace node;
using namespace v8;

class GitMessageTrailer;

struct GitMessageTrailerTraits {
  typedef GitMessageTrailer cppClass;
  typedef git_message_trailer cType;

  static const bool isDuplicable = false;
  static void duplicate(git_message_trailer **dest, git_message_trailer *src) {
     Nan::ThrowError("duplicate called on GitMessageTrailer which cannot be duplicated");
   }

  static const bool isFreeable = true;
  static void free(git_message_trailer *raw) {
    ::free(raw); // :: to avoid calling this free recursively
   }
};

class GitMessageTrailer : public
  NodeGitWrapper<GitMessageTrailerTraits>
{
    // grant full access to base class
    friend class NodeGitWrapper<GitMessageTrailerTraits>;
   public:
    static void InitializeComponent (v8::Local<v8::Object> target);

 

  private:
    GitMessageTrailer()
      : NodeGitWrapper<GitMessageTrailerTraits>(
           "A new GitMessageTrailer cannot be instantiated."
       )
    {}
    GitMessageTrailer(git_message_trailer *raw, bool selfFreeing, v8::Local<v8::Object> owner = v8::Local<v8::Object>())
      : NodeGitWrapper<GitMessageTrailerTraits>(raw, selfFreeing, owner)
    {}
    ~GitMessageTrailer();
     static NAN_METHOD(Key);
    static NAN_METHOD(Value);
};

#endif
